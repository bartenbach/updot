#!/bin/bash 
# vim: set ft=sh :
#
# updot - A script to quickly copy tracked dotfiles to a repository.
#
# Copyright (C) <2012>  <Blake Bartenbach>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
VERSION='0.0.5-indev'

#-------------
# Error Codes
#-------------
declare -i -r NO_REPO=10 
declare -i -r NO_HOME=11
declare -i -r NO_CONF=12
declare -i -r NO_DOTFILES=13
declare -i -r NO_ARGUMENT=14
declare -i -r UNKNOWN_ARGUMENT=15
declare -i -r EXISTING_CONF=16
declare -i -r UPDATE_ERROR=17
declare -i -r UNIMPLEMENTED=18

main() {
  set -x
  parse_arguments $@
  exit 0
}

#-----------------
# Parse arguments
#-----------------
# $@ - The formatting variables
format() {
  for arg in $@
    do
      if [[ $arg -gt 0 ]];then
        reset="\e[0m"
        black="\e[$ul;$bl;$bg;((30+$hi))m"
        red="\e[$ul;$bl;$bg;((31+$hi))m"
        green="\e[$ul;$bl;$bg;((32+$hi))m"
        yellow="\e[$ul;$bl;$bg;((33+$hi))m"
        blue="\e[$ul;$bl;$bg;((34+$hi))m"
        magenta="\e[$ul;$bl;$bg;((35+$hi))m"
        cyan="\e[$ul;$bl;$bg;((36+$hi))m"
        white="\e[$ul;$bl;$bg;((37+$hi))m"
        break
      fi
    done
}

parse_arguments() {
  local stahp
  while [[ -z $stahp ]]
    do
      case $1 in
        -b  | --bold     ) declare -i bl=1;   shift ;;
        -nb | --no-bold  ) declare -i bl=0;   shift ;;
        -c  | --color    ) declare -i cr=1;   shift ;;
        -nc | --no-color ) declare -i cr=0;   shift ;;
        -ul | --uline    ) declare -i ul=4;   shift ;;
        -nu | --no-uline ) declare -i ul=0;   shift ;;
        -hi | --high     ) declare -i hi=60;  shift ;;
        -nh | --no-high  ) declare -i hi=0;   shift ;;
        -*               ) stahp='program';   break ;;
         *               ) stahp='watrudoin'; break ;;
       esac
    done
  format $cr $bl $ul $hi
  while :
    do
      case $1 in
        -h | --help    ) echo_usage ;                      shift ;;
        -l | --ls      ) lsdot ;                           shift ;;
        -u | --update  ) source_config ; update_dotfiles ; shift ;;
        -v | --version ) echo_version ;                    shift ;;
        -w | --write   ) write_default_config ;            shift ;;
        --restore      ) echo "Unimplemented"; exit $UNIMPLEMENTED ;;
        -*             ) unknown_arg $1 ;                  shift ;;
        *              ) echo_usage ; exit $NO_ARGUMENT          ;;
      esac
    done
}

# $1 - The option that was unrecognized
unknown_arg() {
  echo "${red}Unknown option: $1">&2
  echo_usage
  exit $UNKNOWN_ARGUMENT
}

function echo_usage {
  flag=$cyan
  desc=$magenta
  header=$magenta
  echo_version
  echo -e "${header}Usage:$flag updot [format] operation"
  echo ''
  echo -e "${header} Operations:"
  echo -e "$flag  -h, --help     $desc  show this menu"
  echo -e "$flag  -l, --ls       $desc  list all dotfiles in a directory"
  echo -e "$flag  -r, --restore  $desc  currently unimplemented"
  echo -e "$flag  -u, --update   $desc  update tracked dotfiles in repository"
  echo -e "$flag  -w, --write    $desc  writes the default configuration file"
  echo -e "$flag      --version  $desc  prints the version of this program"
  echo ''
  echo -e "${header} Format:"
  echo -e "$flag  -b, --bold     $desc  use bold text"
  echo -e "$flag  -nb,--no-bold  $desc  do not use bold text"
  echo -e "$flag  -c, --color    $desc  print to terminal in color"
  echo -e "$flag  -nc,--no-color $desc  do not print colorized messages${reset}"
  echo ''
}

function echo_version {
  echo -e "${cyan}updot ${green}v$VERSION"
}

#---------------
# List dotfiles
#---------------
# #TODO should accept a directory as parameter
lsdot() {
  echo .* | tr " " "\n" |tail -n +3
}

#--------------------
# configuration file
#--------------------
function find_updot_home {
  if [[ -z $XDG_CONFIG_HOME ]]; then
    echo -ne "${yellow}It appears your "
    echo '$XDG_CONFIG_HOME shell variable is empty..'
    echo -ne "${yellow}Falling back to "
    echo '$HOME'
    if [[ -z $HOME ]]; then
      echo -e "${red}"
      echo -ne '$HOME is not set!  Giving up.'
      exit $NO_HOME
    else
      UPDOT_HOME="$HOME/.config/updot"
    fi
  else
    UPDOT_HOME="$XDG_CONFIG_HOME/updot"
  fi
  UPDOT_CONF="$UPDOT_HOME/updot.conf"
}

function source_config {
  find_updot_home
  if [[ -r $UPDOT_CONF ]];then
    source $UPDOT_CONF
  else
    exit_no_config_found
  fi
}

function exit_no_config_found {
  echo  -e "${red}You need an updot.conf to do that."
  echo -ne "${red}Use "
  echo -n '`'
  echo -ne "${yellow}updot -w${red}"
  echo -n '` to create defaults.'
  echo -e  $reset
  exit $NO_CONF
}

#-----------------
# file operations
#-----------------
function check_for_existing_config {
  if [[ -f $UPDOT_CONF ]];then
    echo "${yellow}You have an existing config! Cowardly standing down."
    exit $EXISTING_CONF;
    #TODO prompt for re-write
  fi
}

function write_default_config {
  find_updot_home
  check_for_existing_config
  mkdir -p $UPDOT_HOME && touch $UPDOT_CONF
  write_to_conf '#' && write_to_conf '# updot.conf - updot configuration file'
  write_to_conf '#' && write_to_conf ''
  write_to_conf "# Repository's root folder location"
  write_to_conf '# Ex: repository_root="$HOME/code/linux/dotfiles"'
  write_to_conf 'repository_root=""' && write_to_conf ''
  write_to_conf '# Tracked dotfiles'
  write_to_conf '# This is an array of dotfiles in your $HOME to copy to your root_repository'
  write_to_conf "# Ex: dotfiles=(' .bash_profile .bashrc .inputrc .mutt/muttrc .xinitrc ')"
  write_default_files && write_to_conf '' 
  write_to_conf '# Color. Ex: use_color="false"'
  write_to_conf 'use_color="true"' && write_to_conf ''
  write_to_conf '# vim: set ft=sh ts=2 sw=2 et:'
  print_new_config_message
}

function write_default_files {
  echo -e "${green}==> Checking for commonly tracked dotfiles"
  write_to_conf_no_newline "dotfiles=('"
  local -a -r defaults=('.bash_profile .bashrc .vimrc .xinitrc .Xresources 
      .xmonad/xmonad.hs .inputrc .xpdfrc .mutt/muttrc .Xdefaults ')
  local file
  for file in $defaults
    do
      if [[ -f "$HOME/$file" ]]; then
        write_to_conf_no_newline $file
        echo -e "${green}  -> $file found"
      fi
    done
  write_to_conf "')"
}

function print_new_config_message {
  echo -e "==> Created new updot.conf at $UPDOT_CONF"
  echo -e '-----------------------------------------------------------------------'
  echo -e " -> Add your repository's root folder to the config before using updot"
  echo -e ' -> Ensure that the config is tracking the dotfiles you want to track'
  echo -e '-----------------------------------------------------------------------'
}

# $1 - Line to write to config
write_to_conf() {
  echo $1 >> $UPDOT_CONF
}

# $1 - Line to write to config
write_to_conf_no_newline() {
  echo -n "$1 " >> $UPDOT_CONF
}

#-----------------
# update dotfiles
#-----------------
function update_dotfiles {
  check_for_repository_root
  check_for_dotfile_array
  echo -e "${green}==>${white} Updating dotfiles"
  declare -i error
  for dotfile in $dotfiles
    do
      if [[ -f "$dotfile" ]];then
        mkdir -p "$repository_root/$(dirname $dotfile)"
        cp "$dotfile" "$repository_root/$(dirname $dotfile)"
        echo -e "${cyan}  ->${white} Updating $dotfile"
      else
        echo -e "${red}  ->${yellow} $dotfile ${red}not found!"
        ((error++))
      fi
    done
  report_errors_to_stdout $error
}

function check_for_dotfile_array {
  arrayLength=${#dotfiles[@]}
  if [ $arrayLength -eq 0 ];then
    echo -e "${red}No dotfile array found in updot.conf!"
    exit $NO_DOTFILES
  fi
}

function check_for_repository_root {
  if [[ -z "$repository_root" ]];then
    echo -e "${red}No repository_root found in updot.conf!$reset"
    exit $NO_REPO
  fi
}

# $1 - The error flag.  Non-zero value indicates at least one error.
report_errors_to_stdout() {
  if [[ $1 -gt 0 ]] ;then
    echo -e "${red}==> ${yellow}Repository update encountered $1 errors"
    exit $UPDATE_ERROR
  else
    echo -e "${green}==> ${white}Repository updated"
  fi
}

main $@
