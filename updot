#!/bin/bash
#
# updot - A script to quickly copy trcked dotfiles to a repository.
#
# Copyright (C) <2012>  <Blake Bartenbach>
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#//TODO parse command line options (--help --version)

#-------------------------
# configuration variables
#-------------------------
updot_home="$HOME/.config/updot"
updot_conf="$HOME/.config/updot/updot.conf"
repository_root=""
declare -a dotfiles=( '.aliases .bash_profile .bashrc .gitconfig .i3/config .prompt .rtorrent.rc .vimrc 
                       .weechat/weechat.conf .xinitrc .Xresources .config/openbox/rc.xml' )

#------------------
# script variables
#------------------
version="0.0.1-indev"

#------------
# exit codes
#------------
no_repo=1
no_dotfiles=2
unknown_argument=3

#-----------------
# Parse arguments
#-----------------
parse_arguments() {
  while :
    do
      case $1 in
        -h | --help | -\?)
          echo "Usage"
          exit 0
          ;;
        -v | --version)
          echo $version
          exit 0
          ;;
        --)
          echo "-- end"
          shift
          break
          ;;
        -*)
          echo "WARN: Unknown option (ignored): $1" >&2
          shift
          exit $unknown_argument
          ;;
        *)
          echo "no more options"
          break
          ;;
      esac
    done
}


#-----
# run
#-----
function run {
  if [[ ! -f "$updot_conf" ]]; then
    mkdir -p "$updot_home"
    touch "$updot_conf"
    write_to_conf "# updot configuration file"
    write_to_conf "  "
    write_to_conf "# Repository's root folder location"
    write_to_conf "# Ex: repository_root=\"/home/$USER/code/linux/dotfiles\""
    write_to_conf "repository_root=\"\""
    write_to_conf "  "
    write_to_conf "# Tracked dotfiles"
    write_to_conf "# This is an array of dotfiles to copy to your repository"
    write_to_conf "# Ex: dotfiles=( '.bashrc' '.xinitrc' '.bash_profile' )"
    write_default_files
    echo "==> Created new updot.conf at $updot_conf"
    echo "-----------------------------------------------------------------------"
    echo " -> Add your repository's root folder to the config before using updot"
    echo " -> Ensure that the config is tracking the dotfiles you want to track"
    echo "-----------------------------------------------------------------------"
  else
    . "$updot_conf"
    update_dotfiles
  fi
}



#-----------------
# file operations
#-----------------
function write_default_files {
  echo "==> Checking for commonly tracked dotfiles"
  write_to_conf_no_newline "dotfiles=('"
  for file in $dotfiles
    do
      if [[ -f "$HOME/$file" ]]; then
        write_to_conf_no_newline "$file"
        echo "  -> $file found"
      fi
    done
    write_to_conf "')"
}

write_to_conf() {
  echo "$1" >> "$updot_conf"
}

write_to_conf_no_newline() {
  echo -n "$1 " >> "$updot_conf"
}


#-----------------
# update dotfiles
#-----------------
function update_dotfiles {
arrayLength=${#dotfiles[@]}
if [[ -z "$repository_root" ]];then
  echo "Please add your repository's root folder to your $updot_conf!"
  exit $no_repo
elif [ $arrayLength -eq 0 ];then
  echo "Not dotfiles array found in config!"
  exit $no_dotfiles
else
  echo "==> Updating dotfiles"
  error=false
  for dotfile in $dotfiles
    do
      if [[ -f "$HOME/$dotfile" ]];then
        mkdir -p "$repository_root/$(dirname $dotfile)"
        cp "$HOME/$dotfile" "$repository_root/$(dirname $dotfile)"
        echo "  -> Updating $dotfile"
      else
        echo "  -> $dotfile not found!"
        error=true
      fi
    done
    if $error ;then
      echo "==> Repository update encountered errors"
    else
      echo "==> Repository updated succesfully"
    fi
fi
}

#------
# exec
#------
#run
parse_arguments $*

# vim: set ft=sh :
