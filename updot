#!/bin/bash 
#
# updot - A script to quickly copy tracked dotfiles to a repository.
#
# Copyright (C) <2012>  <Blake Bartenbach>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#-------------------------
# Script variables
#-------------------------
updot_home="$XDG_CONFIG_HOME/updot"
updot_conf="$updot_home/updot.conf"
declare -a dotfiles=(' .bash_profile .bashrc .i3/config .prompt .rtorrent.rc 
                       .vimrc .profile .weechat/weechat.conf .xinitrc 
                       .Xresources .config/openbox/rc.xml .xmonad/xmonad.hs 
                       .inputrc ')
version='0.0.4-indev'
color=""
bold=""
uline=""
high=0
format=""
use_color=""
stahp=''
no_repo=10
no_dotfiles=20
unknown_argument=30
no_argument=31
update_error=40
no_conf=50
not_yet=66
magic=99

#-------
# Color
#-------
define_color() {
  reset=''
  red='';green='';yellow='';blue='';magenta='';cyan='';white='';black=''
}

reset() {
  echo -ne $reset  
}

#-----------------
# Parse arguments
#-----------------
format() {
  reset="\e[0m";
  if [[ -z $1 ]];then
      black="\e[$ul;$bl;$bg;((30+$hi))m"
        red="\e[$ul;$bl;$bg;((31+$hi))m"
      green="\e[$ul;$bl;$bg;((32+$hi))m"
     yellow="\e[$ul;$bl;$bg;((33+$hi))m"
       blue="\e[$ul;$bl;$bg;((34+$hi))m"
    magenta="\e[$ul;$bl;$bg;((35+$hi))m"
       cyan="\e[$ul;$bl;$bg;((36+$hi))m"
      white="\e[$ul;$bl;$bg;((37+$hi))m"
  fi
}

parse_arguments() {
  while [[ -z $stahp ]]
    do
      case $1 in
        -b  | --bold)      bl=1;   shift ;;
        -nb | --no-bold)   bl=0;   shift ;;
        -c  | --color)     cr=1;   shift ;;
        -nc | --no-color)  cr=0;   shift ;;
        -ul | --uline)     ul=4;   shift ;;
        -nu | --no-uline)  ul=0;   shift ;;
        -hi | --high)      hi=60;  shift ;;
        -nh | --no-high)   hi=0;   shift ;;
        -*) stahp="program...";    break ;;
         *) stahp="wat r u doin";  break ;;
       esac
    done
  format $color
  while :
    do
      case $1 in
        -h | --help | -\?) echo_usage ;;
        -v | --version) echo_version; reset; exit 0 ;;

        --write-default-config) chk_for_existing_config
             write_default_config;shift ;;

        --restore) chk_config; echo "Not implemented yet"; exit $not_yet ;;
        -u | --update) chk_config ; update_dotfiles ;;
        
        -*) echo "Unknown option: $1">&2; echo_usage; exit $unknown_argument ;;
        *) echo_usage;exit $no_argument ;;
      esac
    done
  echo "I have escaped..."
}

echo_usage() {
  flag=$cyan
  help=$magenta
  header=$magenta #//TODO in config?
  echo_version
  echo -e "${header}Usage:$flag updot [format] operation"
  echo ""
  echo -e "${header} Operations:"
  echo -e "$flag  -u, --update   $help  update tracked dotfiles in repository"
  echo -e "$flag  -r, --restore  $help  restore tracked dotfiles to the system"
  echo -e "$flag  -w, --write    $help  (re-)writes the default configuration file"
  echo -e "$flag  -h, --help     $help  Show this menu"
  echo -e "$flag      --version  $help  Prints the version of this program"
  echo ""
  echo -e "${header} Format:"
  echo -e "$flag  -b, --bold     $help  Use bold text"
  echo -e "$flag  -nb,--no-bold  $help  Do not use bold text"
  echo -e "$flag  -c, --color    $help  Print to terminal in color"
  echo -e "$flag  -nc,--no-color $help  Do not print colorized messages${reset}"
  echo ""
  exit 0
}

echo_version() {
  echo -e "${white}${cyan}updot ${green}v${version}${reset}"
}

#--------------------
# configuration file
#--------------------
chk_config() {
  if [[ -r "$updot_conf" ]]; then
    . "$updot_conf"
  else
    echo  -e "${red}You need an updot.conf to do that."
    echo -ne "${red}Use "
    echo -n '`'
    echo -ne "${yellow}updot --write-default-config${red}"
    echo -n '` to create defaults.'
    echo -e  $reset
    exit $no_conf
  fi
}

#-----------------
# file operations
#-----------------
chk_for_existing_cfg() {
  if [[ -f $updot_home/$updot_conf ]];then
    echo "existing config!" && exit 0;
  fi
}

write_default_config() {
  mkdir -p "$updot_home" && touch "$updot_conf"
  write_to_conf "#" && write_to_conf "# updot.conf - updot configuration file"
  write_to_conf "#" && write_to_conf ""
  write_to_conf "# Repository's root folder location"
  write_to_conf "# Ex: repository_root=\"~/code/linux/dotfiles\""
  write_to_conf "repository_root=\"\"" && write_to_conf ""
  write_to_conf "# Tracked dotfiles"
  write_to_conf "# This is an array of dotfiles to copy to your repository"
  write_to_conf "# Ex: dotfiles=(' .bash_profile .bashrc .inputrc .xinitrc ')"
  write_default_files && write_to_conf "" 
  write_to_conf "# Color. Ex: use_color=\"false\""
  write_to_conf "use_color=\"true\"" && write_to_conf ""
  write_to_conf "# vim: set ft=sh ts=2 sw=2 et:"
}

print_new_config_message() {
  echo "==> Created new updot.conf at $updot_conf"
  echo "-----------------------------------------------------------------------"
  echo " -> Add your repository's root folder to the config before using updot"
  echo " -> Ensure that the config is tracking the dotfiles you want to track"
  echo "-----------------------------------------------------------------------"
}

write_default_files() {
  echo '==> Checking for commonly tracked dotfiles'
  write_to_conf_no_newline "dotfiles=('"
  for file in $dotfiles
    do
      if [[ -f "$HOME/$file" ]]; then
        write_to_conf_no_newline "$file"
        echo "  -> $file found"
      fi
    done
    unset file
    write_to_conf "')"
}

write_to_conf() {
  echo "$1" >> "$updot_conf"
}

write_to_conf_no_newline() {
  echo -n "$1 " >> "$updot_conf"
}

#-----------------
# update dotfiles
#-----------------
update_dotfiles() {
  arrayLength=${#dotfiles[@]}
  if [[ -z "$repository_root" ]];then
    echo  -e "${red}Please add your repository's root folder to your $updot_conf!"
    echo -ne $reset && exit $no_repo
  elif [ $arrayLength -eq 0 ];then
    echo "${red}Not dotfiles array found in config!" && exit $no_dotfiles
  else
    echo -ne "${green}==>"
    echo -e "${white} Updating dotfiles" && error=false
    for dotfile in $dotfiles
      do
        if [[ -f "$HOME/$dotfile" ]];then
          mkdir -p "$repository_root/$(dirname $dotfile)"
          cp "$HOME/$dotfile" "$repository_root/$(dirname $dotfile)"
          echo -ne "${cyan}  ->"
          echo -e "${white} Updating $dotfile"
        else
          echo -ne "${red}  ->"
          echo -ne "${yellow} $dotfile "
          echo -e  "${red}not found!"
          error=true
        fi
      done
      unset dotfile
      if $error ;then
        echo -ne "${red}==> "
        echo -e  "${yellow}Repository update encountered errors"
        cleanup
        exit $update_error
      else
        echo -ne "${green}==> "
        echo -e  "${white}Repository updated"
        cleanup
        exit 0
      fi
  fi  
}

#---------
# Cleanup
#---------
cleanup() {
  define_color
  unset error
  unset use_color
  unset repository_root
  unset dotfiles
  unset arrayLength
  unset unknown_argument
  unset updot_conf
  unset updot_home
  reset
}

#------
# exec
#------
define_color
parse_arguments $*
cleanup

# vim: set ft=sh :
