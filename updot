#!/bin/bash 
# vim: set ft=sh :
#
# updot - A script to quickly copy tracked dotfiles to a repository.
#
# Copyright (C) <2012>  <Blake Bartenbach>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VERSION='0.0.7-indev'
declare -i -r NO_REPO=10 
declare -i -r NO_HOME=11
declare -i -r NO_CONF=12
declare -i -r NO_DOTFILES=13
declare -i -r NO_ARGUMENT=14
declare -i -r UNKNOWN_ARGUMENT=15
declare -i -r EXISTING_CONF=16
declare -i -r UPDATE_ERROR=17

# TODO --restore functionality

#------
# Main
#------
main() {
  source_config
  parse_arguments "$@"
}

parse_arguments() {
  local -i cr=0
  local -i bl=0
  local -i ul=0
  local -i hi=0
  [[ $color == true ]]          && local -i cr=1
  [[ $bold == true ]]           && local -i bl=1
  [[ $underline == true ]]      && local -i ul=4
  [[ $high_intensity == true ]] && local -i hi=60
  local stahp
  while [[ -z $stahp ]]
    do
      case $1 in
        -b  | --bold     ) local -i bl=1;     shift ;;
        -nb | --no-bold  ) local -i bl=0;     shift ;;
        -c  | --color    ) local -i cr=1;     shift ;;
        -nc | --no-color ) local -i cr=0;     shift ;;
        -ul | --uline    ) local -i ul=4;     shift ;;
        -nu | --no-uline ) local -i ul=0;     shift ;;
        -hi | --high     ) local -i hi=60;    shift ;;
        -nh | --no-high  ) local -i hi=0;     shift ;;
        -*               ) stahp='program';   break ;;
         *               ) stahp='watrudoin'; break ;;
       esac
    done
  format $cr $bl $ul $hi
  while :
    do
      case $1 in
        -h | --help       ) echo_usage ;             break ;;
        -l | -ls | --list ) lsdot ;                  break ;;
        -u | --update     ) update_dotfiles ;        break ;;
        -v | --version    ) echo_version ;           break ;;
        -w | --write      ) write_default_config ;   break ;;
        --restore         ) echo "Unimplemented" ;   break ;;
        -*                ) unknown_arg $1 ;         break ;;
        *                 ) echo_usage ; exit $NO_ARGUMENT ;;
      esac
    done
}

# $1 - Color
# $2 - Bold
# $3 - Underline
# $4 - High Intensity
format() {
  if [[ $cr -eq 1 ]];then
    reset="\e[0m"
    black="\e[$ul;$bl;$((30+$hi))m"
    red="\e[$ul;$bl;$((31+$hi))m"
    green="\e[$ul;$bl;$((32+$hi))m"
    yellow="\e[$ul;$bl;$((33+$hi))m"
    blue="\e[$ul;$bl;$((34+$hi))m"
    magenta="\e[$ul;$bl;$((35+$hi))m"
    cyan="\e[$ul;$bl;$((36+$hi))m"
    white="\e[$ul;$bl;$((37+$hi))m"
  elif [[ $bl -gt 0 ]] || [[ $hi -gt 0 ]] || [[ $ul -gt 0 ]];then
    black='';red='';green='';yellow='';blue='';magenta='';cyan='';
    reset="\e[0m"
    white="\e[$ul;$bl;$((37+$hi))m"
  else
    black='';red='';green='';yellow='';blue='';magenta='';cyan='';
    white='';reset=''
  fi
}

# $1 - The option that was unrecognized
unknown_arg() {
  echo -e "${white}${red}Unknown option: $1$reset">&2
  echo_usage
  exit $UNKNOWN_ARGUMENT
}

function echo_usage {
  flag=$cyan
  desc=$magenta
  header=$magenta
  [[ -z $flag ]] && flag=$white
  [[ -z $desc ]] && desc=$white
  [[ -z $header ]] && header=$white
  echo_version
  echo -e "${header}Usage:$flag updot [format] operation$reset"
  echo ''
  echo -e "${header} Operations:$reset"
  echo -e "$flag  -h, --help     $desc  show this menu$reset"
  echo -e "$flag  -l, -ls, --list$desc  list all dotfiles in a directory$reset"
  echo -e "$flag  -r, --restore  $desc  currently unimplemented$reset"
  echo -e "$flag  -u, --update   $desc  update tracked dotfiles in repository$reset"
  echo -e "$flag  -w, --write    $desc  writes the default configuration file$reset"
  echo -e "$flag      --version  $desc  prints the version of this program$reset"
  echo ''
  echo -e "${header} Format:$reset"
  echo -e "$flag  -b, --bold     $desc  use bold text$reset"
  echo -e "$flag  -c, --color    $desc  use colors$reset"
  echo -e "$flag  -hi,--high     $desc  use high intensity color$reset"
  echo -e "$flag  -ul,--uline    $desc  use underline (why?)$reset"
  echo -e "$flag  -nb,--no-bold  $desc  do not use bold text$reset"
  echo -e "$flag  -nc,--no-color $desc  do not print colorized messages$reset"
  echo -e "$flag  -nh,--no-high  $desc  do not use high intensity color$reset"
  echo -e "$flag  -nu,--no-uline $desc  do not use underline$reset"
  echo ''
}

function echo_version {
  echo -e "${white}${cyan}updot ${green}v$VERSION$reset"
}

#---------------
# List dotfiles
#---------------
# #TODO should accept a directory as parameter
lsdot() {
  echo -ne ${white}${green} 
  echo .* | tr " " "\n" |tail -n +3
  echo -ne $reset
}

#--------------------
# configuration file
#--------------------
function find_updot_home {
  if [[ -z $XDG_CONFIG_HOME ]]; then
    if [[ -z $HOME ]]; then
      echo -e "${white}${red}"
      echo -ne '$XDG_CONFIG_HOME and $HOME are not set!  Giving up.'
      exit $NO_HOME
    else
      UPDOT_HOME="$HOME/.config/updot"
    fi
  else
    UPDOT_HOME="$XDG_CONFIG_HOME/updot"
  fi
  UPDOT_CONF="$UPDOT_HOME/updot.conf"
}

function source_config {
  find_updot_home
  if [[ -r $UPDOT_CONF ]];then
    source $UPDOT_CONF
  fi
}

function ensure_config {
  [[ -r $UPDOT_CONF ]] || no_config_found
}

function no_config_found {
  echo -e "${white}${red}I couldn't find an updot.conf file$reset"
  echo -e "${white}If this is the first time you've run ${cyan}\`updot -u\`${white},$reset"
  echo -e "${white}answer yes to create one.$reset"
  echo ''
  echo -ne "${white}The ${cyan}updot.conf ${white}defaults to ${cyan}/home/"
  echo -n '$USER/.config/updot/updot.conf'
  echo -e $reset
  echo -e "${white}Would you like to create one now? (y/n)$reset"
  local var
  read var
  if [[ $var == y ]] || [[ $var == yes ]] || [[ $var == Y ]];then
    write_default_config
  else
    exit $NO_CONF
  fi
}

#-----------------
# file operations
#-----------------
function check_for_existing_config {
  if [[ -f $UPDOT_CONF ]];then
    echo -e "${yellow}Existing configuration file found at $UPDOT_CONF"
    echo -e "${white}Would you like to overwrite it? (y/n)$reset"
    local var
    read var
    if [[ $var == y ]] || [[ $var == yes ]] || [[ $var == Y ]];then
      return
    else
      exit 0
    fi
  fi
}

function write_default_config {
  find_updot_home
  check_for_existing_config
  mkdir -p $UPDOT_HOME && touch $UPDOT_CONF
  write_to_conf '#' && write_to_conf '# updot.conf - updot configuration file'
  write_to_conf '#' && write_to_conf ''
  write_to_conf "# Repository's root folder location"
  write_to_conf '# Ex: repository_root="$HOME/code/linux/dotfiles"'
  write_to_conf 'repository_root=""' && write_to_conf ''
  write_to_conf '# Tracked dotfiles'
  write_to_conf '# This is an array of dotfiles in your $HOME to copy to your root_repository'
  write_to_conf "# Ex: dotfiles=(' .bash_profile .bashrc .inputrc .mutt/muttrc .xinitrc ')"
  write_default_files && write_to_conf '' 
  write_to_conf '# Use color in output. true/false'
  write_to_conf 'color="false"' && write_to_conf ''
  write_to_conf '# Use bold print in output'
  write_to_conf 'bold="false"' && write_to_conf ''
  write_to_conf '# Use high intensity color in output'
  write_to_conf 'high_intensity="false"' && write_to_conf ''
  write_to_conf '# Use underlined text in output'
  write_to_conf 'underline="false"' && write_to_conf ''
  write_to_conf '# vim: set ft=sh ts=2 sw=2 et:'
  print_new_config_message
}

function write_default_files {
  echo -e "${white}${green}==> ${white}Checking for commonly tracked dotfiles$reset"
  write_to_conf_no_newline "dotfiles=('"
  local -a -r defaults=('.bash_profile .bashrc .vimrc .xinitrc .Xresources 
      .xmonad/xmonad.hs .inputrc .xpdfrc .mutt/muttrc .Xdefaults ')
  local file
  local -i matches=0
  for file in $defaults
    do
      if [[ -f "$HOME/$file" ]]; then
        ((matches++))
        if [[ $matches -eq 1 ]];then
          write_to_conf_no_newline " $file"
        else
          write_to_conf ''
          write_to_conf_no_newline "            $file"
        fi
        echo -e "${white}${cyan}  -> ${white}$file ${green}found$reset"
      fi
    done
  write_to_conf " ')"
}

function print_new_config_message {
  echo -e "${white}${green}==> ${white}Created new updot.conf at ${UPDOT_CONF}${reset}"
  echo -e "${white}${cyan}-----------------------------------------------------------------------$reset"
  echo -e "${white}${green}==> ${white}Add your repository's root folder to the config before using updot$reset"
  echo -e "${white}${green}==> ${white}Ensure that the config is tracking the dotfiles you want to track$reset"
  echo -e "${white}${cyan}-----------------------------------------------------------------------$reset"
  exit 0
}

# $1 - Line to write to config
write_to_conf() {
  echo "$1" >> $UPDOT_CONF
}

# $1 - Line to write to config
write_to_conf_no_newline() {
  echo -n "$1" >> $UPDOT_CONF
}

#-----------------
# update dotfiles
#-----------------
function update_dotfiles {
  ensure_config
  check_for_repository_root
  check_for_dotfile_array
  echo -e "${white}${green}==>${white} Updating dotfiles$reset"
  declare -i errors
  declare -i updates
  for dotfile in $dotfiles
    do
      if [[ -f "$HOME/$dotfile" ]];then
        diff_dotfiles $dotfile
      else
        echo -e "${white}${red}  ->${yellow} $dotfile ${red}not found!$reset"
        ((errors++))
      fi
    done
  report_updates_to_stdout $updates
  report_errors_to_stdout $errors
}

# $1 - The dotfile to diff
diff_dotfiles() {
  if [[ ! -z $(diff -q $HOME/$dotfile $repository_root/$(dirname $dotfile)) ]];then
    echo -e "${white}${cyan}  -> ${white}$dotfile ${green}updated$reset"
    mkdir -p "$repository_root/$(dirname $dotfile)"
    cp "$HOME/$dotfile" "$repository_root/$(dirname $dotfile)"
    ((updates++))
  else
    echo -e "${white}${cyan}  ->${white} ${dotfile}${reset}"
  fi
}

function check_for_dotfile_array {
  if [ ${#dotfiles[@]} -eq 0 ];then
    echo -e "${white}${red}No ${yellow}dotfiles ${red}found in ${yellow}updot.conf!$reset"
    exit $NO_DOTFILES
  fi
}

function check_for_repository_root {
  if [[ -z "$repository_root" ]];then
    echo -e "${white}${red}No ${yellow}repository_root ${red}found in ${yellow}updot.conf!$reset"
    exit $NO_REPO
  fi
}

# $1 - The error flag.  Non-zero value indicates at least one error.
report_errors_to_stdout() {
  if [[ $1 -gt 0 ]];then
    echo -e "${white}${red}==> ${yellow}Repository update encountered ${red}$1 ${yellow}errors$reset"
    exit $UPDATE_ERROR
  else
    exit 0
  fi
}

# $1 - The update flag.  Indicates the amount of changed files.
report_updates_to_stdout() {
  if [[ $1 -eq 0 ]];then
    echo -e "${white}${green}==> ${white}Repository up to date$reset"
  elif [[ $1 -eq 1 ]];then
    echo -e "${white}${green}==> ${white}Updated $1 file$reset"
  else
    echo -e "${white}${green}==> ${white}Updated $1 files$reset"
  fi
}

main "$@"
